# -*- coding: utf-8 -*-
"""Analisis_Riesgo

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GyCBsJ4AzESJ8Ah2DiCOm56BQWQvITGj

$$
AnalisisRiesgo
$$
"""

pip install --upgrade yfinance
# Importar librerias necesarias
import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta

# Datos posterior al año 2000 de amazon, apple, google, microsoft
tickers = ['AMZN', 'AAPL', 'GOOGL', 'MSFT']
start_date = '2000-01-01'

df = yf.download(tickers, start=start_date, group_by='ticker')
st.df.describe()

"""## Analisis financiero por Empresa

### Apple historico de los ultimos 23 años
"""

# obtener datos historicos de Apple los ultimos 23 años
msft = yf.Ticker("AAPL")
hist = msft.history(start="2000-01-01")

hist.head()

hist.describe()

apple = yf.download("AAPL", start="2000-01-01")
apple = apple[['Open', 'High', 'Low', 'Close']]

sns.set_style("darkgrid")
sns.set_palette("husl")
sns.lineplot(data=apple)

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Obtener datos históricos de Apple ultimos 23 años
msft = yf.Ticker("AAPL")
hist = msft.history(start="2000-01-01")

# Configurar gráfica con Seaborn
sns.set_style("darkgrid")
fig, ax = plt.subplots(figsize=(12, 6))
sns.lineplot(x=hist.index, y=hist["Close"], ax=ax)

# Configurar formato del eje x
date_fmt = mdates.DateFormatter('%d')
ax.xaxis.set_major_formatter(date_fmt)

# Mostrar gráfica
plt.show()

"""## KPI - volatilidad (apple)"""

import pandas as pd
import yfinance as yf

# Descargar los datos históricos de Apple y el índice SP500
apple = yf.download("AAPL", period="30d")
sp500 = yf.download("^GSPC", period="30d")

# Calcular las variaciones porcentuales diarias
apple_returns = apple["Close"].pct_change()
sp500_returns = sp500["Close"].pct_change()

# Calcular la volatilidad de las acciones de Apple y del índice SP500
apple_volatility = apple_returns.std() * (252 ** 0.5) # 252 es el número de días de negociación en un año
sp500_volatility = sp500_returns.std() * (252 ** 0.5)

# Imprimir los resultados
print("Volatilidad de las acciones de Apple en los últimos 30 días: {:.2f}%".format(apple_volatility*100))
print("Volatilidad del índice SP500 en los últimos 30 días: {:.2f}%".format(sp500_volatility*100))

"""## Se recomienda entre 10% al 20% de volatilidad

###  KPi - Margen bruto de beneficios (APPLE)
"""

import yfinance as yf

apple = yf.Ticker("AAPL")
historical_data = apple.history(period="1mo")

ingresos_totales = historical_data["Close"] * historical_data["Volume"]
costo_bienes_vendidos = historical_data["Open"] * historical_data["Volume"]

margen_beneficio_bruto = (ingresos_totales - costo_bienes_vendidos) / ingresos_totales

import seaborn as sns

sns.set_style("darkgrid")
sns.lineplot(x=historical_data.index, y=margen_beneficio_bruto)

"""### KPI - ingreso medio por usuario (Apple)"""

import yfinance as yf
import pandas as pd
import seaborn as sns

# Obtener los datos de Amazon
apple = yf.Ticker("AAPL")

# Obtener los datos históricos de los últimos 30 días
hist = apple.history(period="1mo")

# Calcular los ingresos diarios
hist['Daily Revenue'] = hist['Close'] * hist['Volume']

# Obtener el número de usuarios promedio (se utiliza el valor de 100 millones como ejemplo)
num_users = 100000000

# Calcular los ingresos medios por usuario
hist['Revenue per User'] = hist['Daily Revenue'] / num_users

# Calcular la media móvil de los ingresos medios por usuario en un periodo de 7 días
hist['MA7 Revenue per User'] = hist['Revenue per User'].rolling(window=7).mean()

# Graficar los ingresos medios por usuario y su media móvil
sns.set_style('whitegrid')
sns.lineplot(data=hist[['Revenue per User', 'MA7 Revenue per User']])

"""El KPI de "Ingresos medios por usuario" puede ser un indicador de la prosperidad de una empresa como Amazon si muestra un aumento constante a lo largo del tiempo. Si el ingreso promedio por usuario de la empresa ha aumentado, significa que ha logrado aumentar su base de clientes, ha mejorado la satisfacción y fidelidad del cliente, y/o ha logrado aumentar los ingresos por venta. Si este KPI se mantiene constante o disminuye, podría indicar que la empresa está teniendo dificultades para atraer y retener a los clientes, o que está experimentando una disminución en los ingresos por venta. Por lo tanto, un aumento constante en los ingresos medios por usuario puede interpretarse como un resultado positivo para la empresa.

### Google historico 23 años
"""

# obtener datos historicos de GOOGLE los ultimos 30 dias
google = yf.Ticker("GOOGL")
hist = msft.history(start="2000-01-01")

hist.head()

hist.describe()

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Obtener datos históricos de GOOGLE ultimos 23 años
google = yf.Ticker("GOOGL")
hist = msft.history(start="2000-01-01")

# Configurar gráfica con Seaborn
sns.set_style("darkgrid")
fig, ax = plt.subplots(figsize=(12, 6))
sns.lineplot(x=hist.index, y=hist["Close"], ax=ax)

# Configurar formato del eje x
date_fmt = mdates.DateFormatter('%d')
ax.xaxis.set_major_formatter(date_fmt)

# Mostrar gráfica
plt.show()

# visualizar precios de los ultimos 30 dias
import yfinance as yf
import seaborn as sns

googl = yf.download("GOOGL", period="1mo")
googl = googl[['Open', 'High', 'Low', 'Close']]

sns.set_style("darkgrid")
sns.set_palette("husl")
sns.lineplot(data=googl)

"""### KPI - volatilidad (google)"""

# Descargar los datos históricos de google y el índice SP500
google = yf.download("GOOGL", period="30d")
sp500 = yf.download("^GSPC", period="30d")

# Calcular las variaciones porcentuales diarias
google_returns = google["Close"].pct_change()
sp500_returns = sp500["Close"].pct_change()

# Calcular la volatilidad de las acciones de google y del índice SP500
google_volatility = google_returns.std() * (252 ** 0.5) # 252 es el número de días de negociación en un año
sp500_volatility = sp500_returns.std() * (252 ** 0.5)

# Imprimir los resultados
print("Volatilidad de las acciones de google en los últimos 30 días: {:.2f}%".format(google_volatility*100))
print("Volatilidad del índice SP500 en los últimos 30 días: {:.2f}%".format(sp500_volatility*100))

"""###  KPi - Margen bruto de beneficios (google)"""

import yfinance as yf

google = yf.Ticker("GOOGL")
historical_data = google.history(period="1mo")

ingresos_totales = historical_data["Close"] * historical_data["Volume"]
costo_bienes_vendidos = historical_data["Open"] * historical_data["Volume"]

margen_beneficio_bruto = (ingresos_totales - costo_bienes_vendidos) / ingresos_totales

import seaborn as sns

sns.set_style("darkgrid")
sns.lineplot(x=historical_data.index, y=margen_beneficio_bruto)

"""### KPI  - Ingresos medios por usuario (google)"""

import yfinance as yf
import pandas as pd
import seaborn as sns

# Obtener los datos de google
google = yf.Ticker("GOOGL")

# Obtener los datos históricos de los últimos 30 días
hist = google.history(period="1mo")

# Calcular los ingresos diarios
hist['Daily Revenue'] = hist['Close'] * hist['Volume']

# Obtener el número de usuarios promedio (se utiliza el valor de 100 millones como ejemplo)
num_users = 100000000

# Calcular los ingresos medios por usuario
hist['Revenue per User'] = hist['Daily Revenue'] / num_users

# Calcular la media móvil de los ingresos medios por usuario en un periodo de 7 días
hist['MA7 Revenue per User'] = hist['Revenue per User'].rolling(window=7).mean()

# Graficar los ingresos medios por usuario y su media móvil
sns.set_style('whitegrid')
sns.lineplot(data=hist[['Revenue per User', 'MA7 Revenue per User']])

"""El KPI de "Ingresos medios por usuario" puede ser un indicador de la prosperidad de una empresa como Amazon si muestra un aumento constante a lo largo del tiempo. Si el ingreso promedio por usuario de la empresa ha aumentado, significa que ha logrado aumentar su base de clientes, ha mejorado la satisfacción y fidelidad del cliente, y/o ha logrado aumentar los ingresos por venta. Si este KPI se mantiene constante o disminuye, podría indicar que la empresa está teniendo dificultades para atraer y retener a los clientes, o que está experimentando una disminución en los ingresos por venta. Por lo tanto, un aumento constante en los ingresos medios por usuario puede interpretarse como un resultado positivo para la empresa.

### Amazon historico ultimos 23 años
"""

# obtener datos historicos de AMAZON los ultimos 30 dias
amzn = yf.Ticker("amzn")
hist = msft.history(start="2000-01-01")

hist.head()

hist.describe()

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Obtener datos históricos de Amazon ultimos 23 años
amzn = yf.Ticker("AMZN")
hist = msft.history(start="2000-01-01")

# Configurar gráfica con Seaborn
sns.set_style("darkgrid")
fig, ax = plt.subplots(figsize=(12, 6))
sns.lineplot(x=hist.index, y=hist["Close"], ax=ax)

# Configurar formato del eje x
date_fmt = mdates.DateFormatter('%d')
ax.xaxis.set_major_formatter(date_fmt)

# Mostrar gráfica
plt.show()

# visualizar ultimos movimientos 30
import yfinance as yf
import seaborn as sns

amzn = yf.download("AMZN", period="1mo")
amzn = amzn[['Open', 'High', 'Low', 'Close']]

sns.set_style("darkgrid")
sns.set_palette("husl")
sns.lineplot(data=amzn)

"""### KPI - volatilidad (amazon)"""

# Descargar los datos históricos de amazon y el índice SP500
AMAZON = yf.download("AMZN", period="30d")
sp500 = yf.download("^GSPC", period="30d")

# Calcular las variaciones porcentuales diarias
AMAZON_returns = AMAZON["Close"].pct_change()
sp500_returns = sp500["Close"].pct_change()

# Calcular la volatilidad de las acciones de AMAZON y del índice SP500
AMAZON_volatility = AMAZON_returns.std() * (252 ** 0.5) # 252 es el número de días de negociación en un año
sp500_volatility = sp500_returns.std() * (252 ** 0.5)

# Imprimir los resultados
print("Volatilidad de las acciones de amazon en los últimos 30 días: {:.2f}%".format(AMAZON_volatility*100))
print("Volatilidad del índice SP500 en los últimos 30 días: {:.2f}%".format(sp500_volatility*100))

"""### KPI - - Margen bruto de beneficios (amazon)"""

import yfinance as yf

amazon = yf.Ticker("AMZN")
historical_data = amazon.history(period="1mo")

ingresos_totales = historical_data["Close"] * historical_data["Volume"]
costo_bienes_vendidos = historical_data["Open"] * historical_data["Volume"]

margen_beneficio_bruto = (ingresos_totales - costo_bienes_vendidos) / ingresos_totales

import seaborn as sns

sns.set_style("darkgrid")
sns.lineplot(x=historical_data.index, y=margen_beneficio_bruto)

"""### KPI  - Ingresos medios por usuario (amazon)

Este código obtiene los datos de Amazon utilizando yfinance, calcula los ingresos diarios multiplicando el precio de cierre por el volumen, calcula los ingresos medios por usuario dividiendo los ingresos diarios por el número de usuarios y calcula la media móvil de los ingresos medios por usuario en un periodo de 7 días. Finalmente, grafica los ingresos medios por usuario y su media móvil utilizando seaborn.
"""

import yfinance as yf
import pandas as pd
import seaborn as sns

# Obtener los datos de Amazon
amzn = yf.Ticker("AMZN")

# Obtener los datos históricos de los últimos 30 días
hist = amzn.history(period="1mo")

# Calcular los ingresos diarios
hist['Daily Revenue'] = hist['Close'] * hist['Volume']

# Obtener el número de usuarios promedio (se utiliza el valor de 100 millones como ejemplo)
num_users = 100000000

# Calcular los ingresos medios por usuario
hist['Revenue per User'] = hist['Daily Revenue'] / num_users

# Calcular la media móvil de los ingresos medios por usuario en un periodo de 7 días
hist['MA7 Revenue per User'] = hist['Revenue per User'].rolling(window=7).mean()

# Graficar los ingresos medios por usuario y su media móvil
sns.set_style('whitegrid')
sns.lineplot(data=hist[['Revenue per User', 'MA7 Revenue per User']])

"""El KPI de "Ingresos medios por usuario" puede ser un indicador de la prosperidad de una empresa como Amazon si muestra un aumento constante a lo largo del tiempo. Si el ingreso promedio por usuario de la empresa ha aumentado, significa que ha logrado aumentar su base de clientes, ha mejorado la satisfacción y fidelidad del cliente, y/o ha logrado aumentar los ingresos por venta. Si este KPI se mantiene constante o disminuye, podría indicar que la empresa está teniendo dificultades para atraer y retener a los clientes, o que está experimentando una disminución en los ingresos por venta. Por lo tanto, un aumento constante en los ingresos medios por usuario puede interpretarse como un resultado positivo para la empresa.

### Microsoft historico ultimos 23 años
"""

# obtener datos historicos de AMAZON los ultimos 23 años
microsoft = yf.Ticker("msft")
hist = msft.history(start="2000-01-01")

hist.head()

hist.describe()

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Obtener datos históricos de Microsoft ultimos 23 años
microsoft = yf.Ticker("msft")
hist = microsoft.history(start="2000-01-01")

# Configurar gráfica con Seaborn
sns.set_style("darkgrid")
fig, ax = plt.subplots(figsize=(12, 6))
sns.lineplot(x=hist.index, y=hist["Close"], ax=ax)

# Configurar formato del eje x
date_fmt = mdates.DateFormatter('%d')
ax.xaxis.set_major_formatter(date_fmt)

# Mostrar gráfica
plt.show()

# ultimos movimientos 30 dias
import yfinance as yf
import seaborn as sns

microsoft = yf.download("msft", period="1mo")
microsoft = microsoft[['Open', 'High', 'Low', 'Close']]

sns.set_style("darkgrid")
sns.set_palette("husl")
sns.lineplot(data=microsoft)

"""### KPI - volatilidad (microsoft)"""

# Descargar los datos históricos de microsoft y el índice SP500
microsoft = yf.download("msft", period="30d")
sp500 = yf.download("^GSPC", period="30d")

# Calcular las variaciones porcentuales diarias
microsoft_returns = microsoft["Close"].pct_change()
sp500_returns = sp500["Close"].pct_change()

# Calcular la volatilidad de las acciones de microsoft y del índice SP500
microsoft_volatility = microsoft_returns.std() * (252 ** 0.5) # 252 es el número de días de negociación en un año
sp500_volatility = sp500_returns.std() * (252 ** 0.5)

# Imprimir los resultados
print("Volatilidad de las acciones de microsoft en los últimos 30 días: {:.2f}%".format(microsoft_volatility*100))
print("Volatilidad del índice SP500 en los últimos 30 días: {:.2f}%".format(sp500_volatility*100))

"""### KPI - - Margen bruto de beneficios (microsoft)"""

import yfinance as yf

microsoft = yf.Ticker("msft")
historical_data = microsoft.history(period="1mo")

ingresos_totales = historical_data["Close"] * historical_data["Volume"]
costo_bienes_vendidos = historical_data["Open"] * historical_data["Volume"]

margen_beneficio_bruto = (ingresos_totales - costo_bienes_vendidos) / ingresos_totales

import seaborn as sns

sns.set_style("darkgrid")
sns.lineplot(x=historical_data.index, y=margen_beneficio_bruto)

"""### KPI - Ingresos medios por usuarios (Microsoft)"""

import yfinance as yf
import pandas as pd
import seaborn as sns

# Obtener los datos de Microsoft
microsoft = yf.Ticker("msft")

# Obtener los datos históricos de los últimos 30 días
hist = microsoft.history(period="1mo")

# Calcular los ingresos diarios
hist['Daily Revenue'] = hist['Close'] * hist['Volume']

# Obtener el número de usuarios promedio (se utiliza el valor de 100 millones como ejemplo)
num_users = 100000000

# Calcular los ingresos medios por usuario
hist['Revenue per User'] = hist['Daily Revenue'] / num_users

# Calcular la media móvil de los ingresos medios por usuario en un periodo de 7 días
hist['MA7 Revenue per User'] = hist['Revenue per User'].rolling(window=7).mean()

# Graficar los ingresos medios por usuario y su media móvil
sns.set_style('whitegrid')
sns.lineplot(data=hist[['Revenue per User', 'MA7 Revenue per User']])

"""El KPI de "Ingresos medios por usuario" puede ser un indicador de la prosperidad de una empresa como Amazon si muestra un aumento constante a lo largo del tiempo. Si el ingreso promedio por usuario de la empresa ha aumentado, significa que ha logrado aumentar su base de clientes, ha mejorado la satisfacción y fidelidad del cliente, y/o ha logrado aumentar los ingresos por venta. Si este KPI se mantiene constante o disminuye, podría indicar que la empresa está teniendo dificultades para atraer y retener a los clientes, o que está experimentando una disminución en los ingresos por venta. Por lo tanto, un aumento constante en los ingresos medios por usuario puede interpretarse como un resultado positivo para la empresa."""

